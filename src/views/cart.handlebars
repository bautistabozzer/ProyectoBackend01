<div class="row">
    <div class="col-lg-8">
        <div class="card shadow-sm mb-4">
            <div class="card-body">
                <h5 class="card-title">Mi Carrito</h5>
                {{#if isAdmin}}
                <div class="alert alert-info">
                    <i class="bi bi-info-circle-fill me-2"></i>
                    Como administrador, no puedes tener un carrito de compras.
                </div>
                <div class="text-center">
                    <a href="/admin" class="btn btn-primary">Ir al Panel de Administración</a>
                </div>
                {{else}}
                <div id="cart-items">
                    <div class="text-center py-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Cargando...</span>
                        </div>
                        <p class="mt-3">Cargando carrito...</p>
                    </div>
                </div>
                {{/if}}
            </div>
        </div>
    </div>
    {{#unless isAdmin}}
    <div class="col-lg-4">
        <div class="card shadow-sm">
            <div class="card-body">
                <h5 class="card-title">Resumen</h5>
                <div class="d-flex justify-content-between mb-2">
                    <span>Subtotal:</span>
                    <span id="subtotal">$0.00</span>
                </div>
                <div class="d-flex justify-content-between mb-2 text-success">
                    <span>Descuento:</span>
                    <span id="discount">-$0.00</span>
                </div>
                <hr>
                <div class="d-flex justify-content-between mb-3 fw-bold">
                    <span>Total:</span>
                    <span id="total">$0.00</span>
                </div>
                <button id="checkout-btn" class="btn btn-primary w-100" disabled>
                    Finalizar Compra
                </button>
            </div>
        </div>
    </div>
    {{/unless}}
</div>

{{#unless isAdmin}}
<script>
    document.addEventListener('DOMContentLoaded', async () => {
        const cartItemsContainer = document.getElementById('cart-items');
        const subtotalElement = document.getElementById('subtotal');
        const discountElement = document.getElementById('discount');
        const totalElement = document.getElementById('total');
        const checkoutBtn = document.getElementById('checkout-btn');
        
        // Función para obtener el token de las cookies
        function getTokenFromCookie() {
            const cookies = document.cookie.split(';');
            for (let cookie of cookies) {
                const [name, value] = cookie.trim().split('=');
                if (name === 'token') {
                    return value;
                }
            }
            return null;
        }

        // Obtener token de las cookies o localStorage (fallback)
        const token = getTokenFromCookie() || localStorage.getItem('token');
        
        // Verificar autenticación
        if (!token) {
            cartItemsContainer.innerHTML = `
                <div class="alert alert-warning">
                    <i class="bi bi-exclamation-triangle-fill me-2"></i>
                    Debes iniciar sesión para ver tu carrito
                </div>
                <div class="text-center">
                    <a href="/login" class="btn btn-primary">Iniciar Sesión</a>
                </div>
            `;
            return;
        }

        // Función para hacer peticiones autenticadas
        async function fetchWithAuth(url, options = {}) {
            const headers = {
                ...options.headers,
                'Authorization': `Bearer ${token}`
            };
            
            const response = await fetch(url, { ...options, headers });
            
            if (response.status === 401) {
                // Si el token expiró, redirigir al login
                window.location.href = '/login';
                return null;
            }
            
            return response;
        }

        try {
            // Verificar el rol del usuario
            const userResponse = await fetchWithAuth('/api/sessions/current');
            
            if (!userResponse || !userResponse.ok) {
                throw new Error('Error al verificar usuario');
            }
            
            const userData = await userResponse.json();
            const isAdmin = userData.payload.user.role === 'admin';
            
            if (isAdmin) {
                window.location.href = '/admin';
                return;
            }
        } catch (error) {
            console.error('Error al verificar rol:', error);
        }
        
        // Cargar carrito
        await loadCart();
        
        // Función para cargar el carrito
        async function loadCart() {
            try {
                const response = await fetchWithAuth('/api/carts/current');
                
                if (!response || !response.ok) {
                    throw new Error('Error al cargar el carrito');
                }
                
                const result = await response.json();
                const cart = result.payload.cart;
                
                if (cart.products.length === 0) {
                    cartItemsContainer.innerHTML = `
                        <div class="text-center py-4">
                            <i class="bi bi-cart-x display-4 text-muted"></i>
                            <p class="mt-3">Tu carrito está vacío</p>
                            <a href="/" class="btn btn-primary mt-2">Ver Productos</a>
                        </div>
                    `;
                    checkoutBtn.disabled = true;
                    return;
                }
                
                // Habilitar botón de checkout
                checkoutBtn.disabled = false;
                
                // Calcular totales
                let subtotal = 0;
                let total = 0;
                let discount = 0;
                
                // Generar HTML para los items del carrito
                let cartItemsHTML = '';
                
                cart.products.forEach(item => {
                    const product = item.product;
                    const quantity = item.quantity;
                    const price = product.price || 0;
                    const finalPrice = product.onSale ? (product.finalPrice || price) : price;
                    
                    const itemSubtotal = price * quantity;
                    const itemTotal = finalPrice * quantity;
                    const itemDiscount = itemSubtotal - itemTotal;
                    
                    subtotal += itemSubtotal;
                    total += itemTotal;
                    discount += itemDiscount;
                    
                    cartItemsHTML += `
                    <div class="card mb-3">
                        <div class="card-body">
                            <div class="row align-items-center">
                                <div class="col-md-2 col-4">
                                    <img src="${product.thumbnails?.[0] || '/img/placeholder.png'}" class="img-fluid rounded" alt="${product.title}">
                                </div>
                                <div class="col-md-4 col-8">
                                    <h6 class="mb-0">${product.title || 'Producto sin nombre'}</h6>
                                    <p class="text-muted small mb-0">Código: ${product.code || 'N/A'}</p>
                                </div>
                                <div class="col-md-2 col-4 mt-3 mt-md-0">
                                    <div class="input-group input-group-sm">
                                        <button class="btn btn-outline-secondary decrease-quantity" data-product-id="${product._id}">-</button>
                                        <input type="text" class="form-control text-center" value="${quantity}" readonly>
                                        <button class="btn btn-outline-secondary increase-quantity" data-product-id="${product._id}">+</button>
                                    </div>
                                </div>
                                <div class="col-md-2 col-4 mt-3 mt-md-0 text-center">
                                    ${product.onSale ? 
                                        `<p class="mb-0 text-decoration-line-through text-muted">$${(price || 0).toFixed(2)}</p>
                                        <p class="mb-0 text-danger">$${(finalPrice || 0).toFixed(2)}</p>` : 
                                        `<p class="mb-0">$${(price || 0).toFixed(2)}</p>`
                                    }
                                </div>
                                <div class="col-md-2 col-4 mt-3 mt-md-0 text-end">
                                    <p class="mb-0 fw-bold">$${(itemTotal || 0).toFixed(2)}</p>
                                    <button class="btn btn-sm btn-link text-danger remove-item" data-product-id="${product._id}">
                                        <i class="bi bi-trash"></i> Eliminar
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    `;
                });
                
                cartItemsContainer.innerHTML = cartItemsHTML;
                
                // Actualizar totales
                subtotalElement.textContent = `$${subtotal.toFixed(2)}`;
                discountElement.textContent = `-$${discount.toFixed(2)}`;
                totalElement.textContent = `$${total.toFixed(2)}`;
                
                // Añadir event listeners para los botones
                document.querySelectorAll('.increase-quantity').forEach(button => {
                    button.addEventListener('click', () => updateQuantity(button.dataset.productId, 1));
                });
                
                document.querySelectorAll('.decrease-quantity').forEach(button => {
                    button.addEventListener('click', () => updateQuantity(button.dataset.productId, -1));
                });
                
                document.querySelectorAll('.remove-item').forEach(button => {
                    button.addEventListener('click', () => removeItem(button.dataset.productId));
                });
                
                // Añadir event listener para el botón de checkout
                checkoutBtn.addEventListener('click', checkout);
                
            } catch (error) {
                console.error('Error:', error);
                cartItemsContainer.innerHTML = `
                    <div class="alert alert-danger">
                        <i class="bi bi-exclamation-triangle-fill me-2"></i>
                        Error al cargar el carrito
                    </div>
                `;
            }
        }
        
        // Función para actualizar la cantidad de un producto
        async function updateQuantity(productId, change) {
            try {
                const response = await fetchWithAuth(`/api/carts/current/products/${productId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ change })
                });
                
                if (!response || !response.ok) {
                    const error = await response.json();
                    throw new Error(error.message || 'Error al actualizar cantidad');
                }
                
                await loadCart();
            } catch (error) {
                console.error('Error:', error);
                alert(error.message || 'Error al actualizar cantidad');
            }
        }
        
        // Función para eliminar un producto del carrito
        async function removeItem(productId) {
            try {
                const response = await fetchWithAuth(`/api/carts/current/products/${productId}`, {
                    method: 'DELETE'
                });
                
                if (!response || !response.ok) {
                    throw new Error('Error al eliminar producto');
                }
                
                await loadCart();
            } catch (error) {
                console.error('Error:', error);
                alert('Error al eliminar producto');
            }
        }
        
        // Función para finalizar la compra
        async function checkout() {
            try {
                checkoutBtn.disabled = true;
                checkoutBtn.innerHTML = `
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    Procesando...
                `;
                
                const response = await fetchWithAuth('/api/carts/current/purchase', {
                    method: 'POST'
                });
                
                if (!response || !response.ok) {
                    const error = await response.json();
                    throw new Error(error.message || 'Error al procesar la compra');
                }
                
                cartItemsContainer.innerHTML = `
                    <div class="alert alert-success">
                        <i class="bi bi-check-circle-fill me-2"></i>
                        ¡Compra realizada con éxito! Redirigiendo a tu perfil...
                    </div>
                    <div class="text-center">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Redirigiendo...</span>
                        </div>
                    </div>
                `;
                
                subtotalElement.textContent = '$0.00';
                discountElement.textContent = '-$0.00';
                totalElement.textContent = '$0.00';
                checkoutBtn.disabled = true;
                
                document.getElementById('cart-count').textContent = '0';
                
                setTimeout(() => {
                    window.location.href = '/profile';
                }, 2000);
            } catch (error) {
                console.error('Error:', error);
                checkoutBtn.disabled = false;
                checkoutBtn.textContent = 'Finalizar Compra';
                alert(error.message || 'Error al procesar la compra');
            }
        }
    });
</script>
{{/unless}} 