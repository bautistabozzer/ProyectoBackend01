<div class="row">
    <div class="col-12 mb-4">
        <div class="d-flex justify-content-between align-items-center">
            <h2>Gestión de Carritos</h2>
            <div>
                <a href="/admin" class="btn btn-outline-primary">
                    <i class="bi bi-arrow-left"></i> Volver al Panel
                </a>
            </div>
        </div>
        <hr>
    </div>
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Usuario</th>
                                <th>Productos</th>
                                <th>Total</th>
                                <th>Estado</th>
                                <th>Fecha</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody id="carts-table-body">
                            <tr>
                                <td colspan="6" class="text-center">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Cargando...</span>
                                    </div>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal de Detalle de Carrito -->
<div class="modal fade" id="cartDetailModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Detalle del Carrito</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="row mb-3">
                    <div class="col-md-6">
                        <p><strong>Usuario:</strong> <span id="modal-user"></span></p>
                        <p><strong>Estado:</strong> <span id="modal-status"></span></p>
                    </div>
                    <div class="col-md-6">
                        <p><strong>Fecha:</strong> <span id="modal-date"></span></p>
                        <p><strong>Total:</strong> <span id="modal-total"></span></p>
                    </div>
                </div>
                <h6>Productos:</h6>
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Producto</th>
                                <th>Cantidad</th>
                                <th>Precio</th>
                                <th>Subtotal</th>
                            </tr>
                        </thead>
                        <tbody id="modal-products">
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', async () => {
    const token = localStorage.getItem('token');
    const tableBody = document.getElementById('carts-table-body');
    
    if (!token) {
        window.location.href = '/login';
        return;
    }

    async function loadCarts() {
        try {
            const response = await fetch('/api/carts', {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            if (!response.ok) {
                throw new Error('Error al cargar carritos');
            }

            const data = await response.json();
            const carts = data.payload.carts;

            // Filtrar carritos sin usuario
            const validCarts = carts.filter(cart => cart.user);

            let html = '';
            for (const cart of validCarts) {
                const user = cart.user ? `${cart.user.firstName} ${cart.user.lastName}` : 'N/A';
                const total = cart.products.reduce((sum, item) => {
                    if (!item.product || typeof item.product.finalPrice === 'undefined') return sum;
                    return sum + (item.product.finalPrice * item.quantity);
                }, 0);
                const productCount = cart.products.reduce((sum, item) => sum + (item.quantity || 0), 0);
                const date = new Date(cart.createdAt).toLocaleString();

                html += `
                    <tr>
                        <td>${user}</td>
                        <td>${productCount} items</td>
                        <td>$${total.toFixed(2)}</td>
                        <td>
                            <span class="badge ${cart.status === 'active' ? 'bg-success' : 'bg-secondary'}">
                                ${cart.status}
                            </span>
                        </td>
                        <td>${date}</td>
                        <td>
                            <button class="btn btn-info btn-sm view-cart" data-cart='${JSON.stringify(cart)}'>
                                <i class="bi bi-eye"></i>
                            </button>
                            <button class="btn btn-danger btn-sm clear-cart" data-cart-id="${cart._id}">
                                <i class="bi bi-trash"></i>
                            </button>
                        </td>
                    </tr>
                `;
            }

            // Si hay carritos sin usuario, eliminarlos automáticamente
            const invalidCarts = carts.filter(cart => !cart.user);
            if (invalidCarts.length > 0) {
                showToast(`Se encontraron ${invalidCarts.length} carritos sin usuario. Serán eliminados automáticamente.`, 'warning');
                for (const cart of invalidCarts) {
                    await clearCart(cart._id);
                }
            }

            tableBody.innerHTML = html || `
                <tr>
                    <td colspan="6" class="text-center">
                        No hay carritos para mostrar
                    </td>
                </tr>
            `;

            // Agregar event listeners
            document.querySelectorAll('.view-cart').forEach(button => {
                button.addEventListener('click', () => {
                    const cart = JSON.parse(button.dataset.cart);
                    showCartDetail(cart);
                });
            });

            document.querySelectorAll('.clear-cart').forEach(button => {
                button.addEventListener('click', () => clearCart(button.dataset.cartId));
            });

        } catch (error) {
            console.error('Error:', error);
            tableBody.innerHTML = `
                <tr>
                    <td colspan="6" class="text-center text-danger">
                        Error al cargar los carritos
                    </td>
                </tr>
            `;
        }
    }

    function showCartDetail(cart) {
        const modal = new bootstrap.Modal(document.getElementById('cartDetailModal'));
        
        // Llenar datos del modal
        document.getElementById('modal-user').textContent = cart.user ? 
            `${cart.user.firstName} ${cart.user.lastName} (${cart.user.email})` : 'N/A';
        document.getElementById('modal-status').textContent = cart.status;
        document.getElementById('modal-date').textContent = new Date(cart.createdAt).toLocaleString();
        
        const total = cart.products.reduce((sum, item) => {
            if (!item.product || typeof item.product.finalPrice === 'undefined') return sum;
            return sum + (item.product.finalPrice * item.quantity);
        }, 0);
        document.getElementById('modal-total').textContent = `$${total.toFixed(2)}`;

        // Llenar tabla de productos
        let productsHtml = '';
        cart.products.forEach(item => {
            if (!item.product) return;
            const subtotal = (item.product.finalPrice || 0) * (item.quantity || 0);
            productsHtml += `
                <tr>
                    <td>
                        <div class="d-flex align-items-center">
                            <img src="${item.product.thumbnails?.[0] || '/img/placeholder.png'}" 
                                 alt="${item.product.title || 'Producto no disponible'}"
                                 class="me-2"
                                 style="width: 40px; height: 40px; object-fit: cover;">
                            <div>
                                <strong>${item.product.title || 'Producto no disponible'}</strong><br>
                                <small class="text-muted">Código: ${item.product.code || 'N/A'}</small>
                            </div>
                        </div>
                    </td>
                    <td>${item.quantity || 0}</td>
                    <td>$${(item.product.finalPrice || 0).toFixed(2)}</td>
                    <td>$${subtotal.toFixed(2)}</td>
                </tr>
            `;
        });
        document.getElementById('modal-products').innerHTML = productsHtml;

        modal.show();
    }

    async function clearCart(cartId) {
        if (!confirm('¿Estás seguro de que deseas eliminar este carrito?')) {
            return;
        }

        try {
            const response = await fetch(`/api/carts/${cartId}`, {
                method: 'DELETE',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error('Error al eliminar el carrito');
            }

            // Recargar la lista de carritos
            await loadCarts();
            showToast('Carrito eliminado exitosamente', 'success');
        } catch (error) {
            console.error('Error:', error);
            showToast('Error al eliminar el carrito', 'danger');
        }
    }

    function showToast(message, type = 'success') {
        const toastContainer = document.createElement('div');
        toastContainer.className = 'toast';
        toastContainer.innerHTML = `
            <div class="toast-header bg-${type} text-white">
                <strong class="me-auto">MultiShop</strong>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast"></button>
            </div>
            <div class="toast-body">
                ${message}
            </div>
        `;
        document.body.appendChild(toastContainer);
        const toast = new bootstrap.Toast(toastContainer);
        toast.show();
        toastContainer.addEventListener('hidden.bs.toast', () => {
            toastContainer.remove();
        });
    }

    // Cargar carritos inicialmente
    await loadCarts();
});
</script> 